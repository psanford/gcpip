//go:build tools
// +build tools

package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"log"
	"net/http"
	"os"
	"text/template"

	"golang.org/x/tools/imports"
)

var ipURL = flag.String("url", "https://www.gstatic.com/ipranges/cloud.json", "URL to fetch ips from")

func main() {
	flag.Parse()
	resp, err := http.Get(*ipURL)
	if err != nil {
		log.Fatalf("http fetch err: %s", err)
	}

	dec := json.NewDecoder(resp.Body)
	var ips IpResp
	err = dec.Decode(&ips)
	if err != nil {
		log.Fatalf("decode json err: %s", err)
	}

	tmpl := template.Must(template.New("ips").Parse(ipTmpl))

	var buf bytes.Buffer
	err = tmpl.Execute(&buf, ips)
	if err != nil {
		log.Fatalf("template err: %s", err)
	}

	fmted, err := imports.Process("ips.gen.go", buf.Bytes(), nil)
	if err != nil {
		log.Fatalf("goimports error: %s", err)
	}

	fout, err := os.Create("ips.gen.go")
	if err != nil {
		log.Fatalf("open ips.gen.go err: %s", err)
	}

	fout.Write(fmted)
	fout.Close()
}

var ipTmpl = `
// Code generated by update_ips.go. DO NOT EDIT.

package gcpip

import (
	"net/netip"

	"github.com/gaissmai/cidrtree"
)

var cidrTbl = new(cidrtree.Table[IPRange])

func init() {
  var r IPRange
{{- range .Prefixes}}
  r = IPRange{
{{if ne .IPv4Prefix ""}}
		Prefix: netip.MustParsePrefix("{{.IPv4Prefix}}"),
{{else}}
		Prefix: netip.MustParsePrefix("{{.IPv6Prefix}}"),
{{end}}
		Service: "{{.Service}}",
		Scope: "{{.Scope}}",
	}
  cidrTbl.Insert(r.Prefix, r)
{{- end}}
}

var createDate = "{{.CreationTime}}"
`

type IpResp struct {
	CreationTime string   `json:"creationTime"`
	Prefixes     []Prefix `json:"prefixes"`
	SyncToken    string   `json:"syncToken"`
}

type Prefix struct {
	IPv4Prefix string `json:"ipv4Prefix"`
	IPv6Prefix string `json:"ipv6Prefix"`
	Scope      string `json:"scope"`
	Service    string `json:"service"`
}
